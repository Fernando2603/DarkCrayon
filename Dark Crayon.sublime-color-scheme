{
	"name": "Dark Crayon",
	"author": "Fernando",
	"variables": {
		"color_white": "#FFFFFF",
		"color_black": "#000000",
		"color_red": "#FF0000",
		"color_green": "#00FF00",
		"color_yellow": "#FFFF00",
		"color_orange": "#FFA500",
		"color_selection": "color(#49483E alpha(0.8))",
		"color_independence": "#4C566A",
		"color_dark_sky_blue": "#88C0D0",
		"color_cultured": "#F0F0F8",
		"color_taupe_gray": "#888888",
		"color_black_olive": "#3B3A32",
		"color_raisin_black": "#252525",
		"color_police_blue": "#434C5E",
		"color_fuzzy_wuzzy": "#BF616A",
		"color_outer_space": "#2E3340",
		"color_lavender": "#AE81FF",
		"color_green_lizard": "#A6E22E",
		"color_sky_blue": "#66D9EF",
		"color_electric_pink": "#F92672",
		"color_straw": "#E6DB74",
		"color_lemon_glacier": "#F2FF00",
		"color_carrot_orange": "#FD971F",
		"color_gainsboro": "#D8DEE9",
		"color_electric_green": "#16FF00",
		"color_pastel_green": "#7EE787",
		"color_pewter_blue": "#8FBCBB"
	},
	"globals": {
		"accent": "var(color_dark_sky_blue)",
		"active_guide": "var(color_independence)",
		"background": "var(color_black)",
		"brackets_foreground": "var(color_dark_sky_blue)",
		"brackets_options": "underline",
		"caret": "var(color_cultured)",
		"find_highlight_foreground": "var(color_white)",
		"find_highlight": "var(color_black)",
		"foreground": "var(color_cultured)",
		"guide": "color(var(color_police_blue) alpha(0.5))",
		"gutter_foreground": "var(color_taupe_gray)",
		"gutter": "var(color_black)",
		"highlight": "var(color_white)",
		"inactive_selection": "var(color_selection)",
		"invisibles": "var(color_black_olive)",
		"line_diff_added": "var(color_green)",
		"line_diff_deleted": "var(color_red)",
		"line_diff_modified": "var(color_yellow)",
		"line_highlight": "var(color_raisin_black)",
		"minimap_border": "color(var(color_police_blue) alpha(0.32))",
		"misspelling": "var(color_fuzzy_wuzzy)",
		"selection_border": "var(color_green)",
		"selection": "var(color_selection)",
		"shadow_width": "8",
		"shadow": "var(color_outer_space)",
		"stack_guide": "color(var(color_police_blue) alpha(0.5))",
		"tags_foreground": "var(color_dark_sky_blue)",
		"tags_options": "underline"
	},
	"rules": [
		{
			"name": "[Comment] Comment",
			"scope": "comment, punctuation.definition.comment",
			"foreground": "var(color_electric_green)",
			"font_style": "italic"
		},
		{
			"name": "[Constant] Constant",
			"scope": "constant",
			"foreground": "var(color_lavender)"
		},
		{
			"name": "[Constant] Numeric",
			"scope": "constant.numeric",
			"foreground": "var(color_lavender)"
		},
		{
			"name": "[Constant] Escape",
			"scope": "constant.character.escape",
			"foreground": "var(color_lavender)"
		},
		{
			"name": "[Constant] Literal",
			"scope": "constant.character.literal",
			"foreground": "var(color_straw)"
		},
		{
			"name": "[Constant] Language",
			"scope": "constant.language",
			"foreground": "var(color_lavender)",
			"font_style": "italic"
		},
		{
			"name": "[Constant] Other",
			"scope": "constant.other",
			"foreground": "var(color_lavender)"
		},
		{
			"name": "[Entity] Entity",
			"scope": "entity",
			"foreground": "var(color_green_lizard)"
		},
		{
			"name": "[Entity] Function",
			"scope": "entity.name.function",
			"foreground": "var(color_green_lizard)",
			"font_style": "bold"
		},
		{
			"name": "[Entity] Type",
			"scope": "entity.name.type",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[Entity] Type Interface",
			"scope": "entity.name.type.interface",
			"foreground": "var(color_sky_blue)",
			"font_style": "underline"
		},
		{
			"name": "[Entity] Type Enum",
			"scope": "entity.name.type.enum",
			"foreground": "var(color_carrot_orange)",
			"font_style": "bold"
		},
		{
			"name": "[Entity] Type Alias",
			"scope": "entity.name.type.alias"
		},
		{
			"name": "[Entity] Tag",
			"scope": "entity.name.tag",
			"foreground": "var(color_electric_pink)"
		},
		{
			"name": "[Entity] Section",
			"scope": "entity.name.section",
			"foreground": "var(color_dark_sky_blue)"
		},
		{
			"name": "[Entity] Class",
			"scope": "entity.name.class",
			"foreground": "var(color_green_lizard)",
			"font_style": "underline"
		},
		{
			"name": "[Entity] Class Implements",
			"scope": "meta.class.implements entity.other.inherited-class",
			"foreground": "var(color_sky_blue)",
			"font_style": "underline"
		},
		{
			"name": "[Entity] Enum",
			"scope": "entity.name.enum",
			"foreground": "var(color_carrot_orange)",
			"font_style": "bold"
		},
		{
			"name": "[Entity] Interface",
			"scope": "entity.name.interface",
			"foreground": "var(color_sky_blue)",
			"font_style": "underline"
		},
		{
			"name": "[Entity] Struct",
			"scope": "entity.name.struct",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[Entity] Trait",
			"scope": "entity.name.trait",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[Entity] Union",
			"scope": "entity.name.union",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[Entity] Inherited Class",
			"scope": "entity.other.inherited-class",
			"foreground": "var(color_green_lizard)",
			"font_style": "underline"
		},
		{
			"name": "[Entity] Constructor",
			"scope": "entity.name.function.constructor",
			"foreground": "var(color_green_lizard)"
		},
		{
			"name": "[Entity] Destructor",
			"scope": "entity.name.function.destructor",
			"foreground": "var(color_green_lizard)"
		},
		{
			"name": "[Entity] Namespace",
			"scope": "entity.name.namespace",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[Entity] Constant",
			"scope": "entity.name.constant",
			"foreground": "var(color_lemon_glacier)",
			"font_style": "bold italic"
		},
		{
			"name": "[Entity] Label",
			"scope": "entity.name.label",
			"foreground": "var(color_electric_pink)",
			"font_style": "bold italic underline"
		},
		{
			"name": "[Entity] Attribute Name",
			"scope": "entity.other.attribute-name",
			"foreground": "var(color_green_lizard)"
		},
		{
			"name": "[Invalid] Illegal",
			"scope": "invalid.illegal",
			"foreground": "var(color_white)",
			"background": "var(color_electric_pink)"
		},
		{
			"name": "[Invalid] Deprecated",
			"scope": "invalid.deprecated",
			"foreground": "var(color_white)",
			"background": "var(color_lavender)"
		},
		{
			"name": "[Keyword] Keyword",
			"scope": "keyword",
			"foreground": "var(color_electric_pink)",
			"font_style": "italic bold"
		},
		{
			"name": "[Keyword] Control",
			"scope": "keyword.control",
			"foreground": "var(color_electric_pink)"
		},
		{
			"name": "[Keyword] Control Conditional",
			"scope": "keyword.control.conditional",
			"foreground": "var(color_electric_pink)"
		},
		{
			"name": "[Keyword] Control Import",
			"scope": "keyword.control.import",
			"foreground": "var(color_electric_pink)"
		},
		{
			"name": "[Keyword] Punctuation Definition",
			"scope": "punctuation.definition.keyword",
			"foreground": "var(color_electric_pink)"
		},
		{
			"name": "[Keyword] Operator",
			"scope": "keyword.operator",
			"foreground": "var(color_electric_pink)",
			"font_style": "bold"
		},
		{
			"name": "[Keyword] Operator Assignment",
			"scope": "keyword.operator.assignment",
			"foreground": "var(color_electric_pink)"
		},
		{
			"name": "[Keyword] Operator Arithmetic",
			"scope": "keyword.operator.arithmetic",
			"foreground": "var(color_electric_pink)"
		},
		{
			"name": "[Keyword] Operator Bitwise",
			"scope": "keyword.operator.bitwise",
			"foreground": "var(color_electric_pink)"
		},
		{
			"name": "[Keyword] Operator Logical",
			"scope": "keyword.operator.logical",
			"foreground": "var(color_electric_pink)"
		},
		{
			"name": "[Keyword] Operator Word",
			"scope": "keyword.operator.word",
			"foreground": "var(color_electric_pink)"
		},
		{
			"name": "[Keyword] Operator Type",
			"scope": "keyword.operator.type",
			"foreground": "var(color_electric_pink)",
			"font_style": "bold"
		},
		{
			"name": "[Keyword] Operator Annotation",
			"scope": "keyword.operator.type.annotation",
			"foreground": "var(color_white)",
			"font_style": "none"
		},
		{
			"name": "[Keyword] Other",
			"scope": "keyword.other",
			"foreground": "var(color_electric_pink)"
		},
		{
			"name": "[Markup] Heading",
			"scope": "markup.heading",
			"foreground": "var(color_dark_sky_blue)"
		},
		{
			"name": "[Markup] List",
			"scope": "markup.list.unnumbered, markup.list.numbered",
			"foreground": "var(color_white)"
		},
		{
			"name": "[Markup] bold",
			"scope": "markup.bold",
			"font_style": "bold"
		},
		{
			"name": "[Markup] Italic",
			"scope": "markup.italic",
			"font_style": "italic"
		},
		{
			"name": "[Markup] Inserted",
			"scope": "markup.inserted",
			"foreground": "var(color_electric_green)"
		},
		{
			"name": "[Markup] Deleted",
			"scope": "markup.deleted",
			"foreground": "var(color_red)"
		},
		{
			"name": "[Markup] Changed",
			"scope": "markup.changed",
			"foreground": "var(color_yellow)"
		},
		{
			"name": "[Markup] Quote",
			"scope": "markup.quote",
			"foreground": "var(color_electric_green)"
		},
		{
			"name": "[Markup] Raw",
			"scope": "markup.raw.inline, markup.raw.block",
			"foreground": "var(color_taupe_gray)"
		},
		{
			"name": "[Markup] Other",
			"scope": "markup.other",
			"background": "var(color_white)"
		},
		{
			"name": "[Punctuation] Separator",
			"scope": "punctuation.separator",
			"foreground": "var(color_white)"
		},
		{
			"name": "[Punctuation] Separator Continuation",
			"scope": "punctuation.separator.continuation",
			"foreground": "var(color_white)"
		},
		{
			"name": "[Punctuation] Separator Accessor",
			"scope": "punctuation.accessor",
			"foreground": "var(color_white)"
		},
		{
			"name": "[Punctuation] Terminator",
			"scope": "punctuation.terminator",
			"foreground": "var(color_white)"
		},
		{
			"name": "[Punctuation] Definition Tag",
			"scope": "punctuation.definition.tag",
			"foreground": "var(color_white)"
		},
		{
			"name": "[Storage] Storage",
			"scope": "storage",
			"foreground": "var(color_electric_pink)"
		},
		{
			"name": "[Storage] Type",
			"scope": "storage.type",
			"foreground": "var(color_electric_pink)",
			"font_style": "italic bold"
		},
		{
			"name": "[Storage] Modifier",
			"scope": "storage.modifier",
			"foreground": "var(color_electric_pink)",
			"font_style": "italic bold"
		},
		{
			"name": "[Storage] Modifier Array",
			"scope": "storage.modifier.array",
			"foreground": "var(color_white)",
			"font_style": "none"
		},
		{
			"name": "[String] Quoted",
			"scope": "string.quoted",
			"foreground": "var(color_straw)",
			"font_style": "italic"
		},
		{
			"name": "[String] Quoted Single",
			"scope": "string.quoted.single",
			"foreground": "var(color_straw)"
		},
		{
			"name": "[String] Quoted Double",
			"scope": "string.quoted.double",
			"foreground": "var(color_straw)"
		},
		{
			"name": "[String] Quoted Triple",
			"scope": "string.quoted.triple",
			"foreground": "var(color_straw)"
		},
		{
			"name": "[String] Quoted Other",
			"scope": "string.quoted.other",
			"foreground": "var(color_straw)"
		},
		{
			"name": "[String] Unquoted",
			"scope": "string.unquoted",
			"foreground": "var(color_straw)",
			"font_style": "italic"
		},
		{
			"name": "[String] Punctuation Definition Begin",
			"scope": "punctuation.definition.string.begin",
			"foreground": "var(color_straw)",
			"font_style": "italic"
		},
		{
			"name": "[String] Punctuation Definition End",
			"scope": "punctuation.definition.string.end",
			"foreground": "var(color_straw)",
			"font_style": "italic"
		},
		{
			"name": "[String] RegExp",
			"scope": "string.regexp",
			"foreground": "var(color_lavender)",
			"font_style": "italic"
		},
		{
			"name": "[Support] Support",
			"scope": "support",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[Support] Constant",
			"scope": "support.constant",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[Support] Function",
			"scope": "support.function",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[Support] Module",
			"scope": "support.module",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[Support] Type",
			"scope": "support.type",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[Support] Type Primitive",
			"scope": "support.type",
			"foreground": "var(color_sky_blue)",
			"font_style": "italic"
		},
		{
			"name": "[Support] Class",
			"scope": "support.class",
			"foreground": "var(color_sky_blue)",
			"font_style": "italic"
		},
		{
			"name": "[Text] Text",
			"scope": "text",
			"foreground": "var(color_white)"
		},
		{
			"name": "[Text] Plain",
			"scope": "text.plain",
			"foreground": "var(color_white)"
		},
		{
			"name": "[Text] HTML",
			"scope": "text.html.basic",
			"foreground": "var(color_white)"
		},
		{
			"name": "[Text] XML",
			"scope": "text.xml",
			"foreground": "var(color_white)"
		},
		{
			"name": "[Variable] Variable",
			"scope": "variable",
			"foreground": "var(color_lemon_glacier)",
			"font_style": "italic bold"
		},
		{
			"name": "[Variable] Function",
			"scope": "variable.function",
			"foreground": "var(color_green_lizard)",
			"font_style": "bold"
		},
		{
			"name": "[Variable] Language",
			"scope": "variable.language",
			"foreground": "var(color_electric_pink)"
		},
		{
			"name": "[Variable] Parameter",
			"scope": "variable.parameter",
			"foreground": "var(color_carrot_orange)",
			"font_style": "italic"
		},
		{
			"name": "[Variable] Punctuation Definition",
			"scope": "punctuation.definition.variable",
			"foreground": "var(color_electric_pink)"
		},
		{
			"name": "[Variable] Type",
			"scope": "variable.type",
			"foreground": "var(color_green_lizard)"
		},
		{
			"name": "[Variable] Other",
			"scope": "variable.other",
			"foreground": "var(color_lemon_glacier)"
		},
		{
			"name": "[Variable] Other Constant",
			"scope": "variable.other.constant",
			"foreground": "var(color_lemon_glacier)"
		},
		{
			"name": "[Variable] Other ReadWrite",
			"scope": "variable.other.readwrite",
			"foreground": "var(color_lemon_glacier)"
		},
		{
			"name": "[Variable] Other Member",
			"scope": "variable.other.member",
			"foreground": "var(color_lemon_glacier)"
		},
		{
			"name": "[Variable] Other Property",
			"scope": "variable.other.property",
			"foreground": "var(color_white)",
			"font_style": "none"
		},
		{
			"name": "[Find Result] Gutter Number",
			"scope": "constant.numeric.line-number.find-in-files",
			"foreground": "var(color_taupe_gray)"
		},
		{
			"name": "[Find Result] Gutter Number Match",
			"scope": "constant.numeric.line-number.match.find-in-files",
			"foreground": "var(color_green)",
			"font_style": "underline"
		},
		{
			"name": "[Find Result] Filename",
			"scope": "entity.name.filename.find-in-files",
			"foreground": "var(color_white)",
			"font_style": "underline"
		},
		{
			"name": "[Find Result] Text",
			"scope": "text.find-in-files",
			"foreground": "var(color_gainsboro)"
		},
		{
			"name": "[C/C++] Preprocessor/Include",
			"scope": "source.c keyword.control.import.include, source.c meta.preprocessor keyword.control.import, source.c++ keyword.control.import.include, source.c++ meta.preprocessor.c++ keyword.control.import",
			"foreground": "var(color_electric_pink)"
		},
		{
			"name": "[C/C++] BuiltIn Function",
			"scope": "source.c keyword.operator.word, source.c++ keyword.operator.word",
			"foreground": "var(color_sky_blue)",
			"font_style": "italic"
		},
		{
			"name": "[CSS] Entity Name Tag",
			"scope": "source.css meta.selector entity.name.tag.html",
			"font_style": "bold"
		},
		{
			"name": "[CSS/Sass] Property Name",
			"scope": "source.css support.type.property-name, source.sass support.type.property-name.sass, source.css support.type.vendor-prefix",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[CSS/Sass] RGB Value",
			"scope": "source.css constant.other.color.rgb-value, source.sass constant.other.rgb-value",
			"foreground": "var(color_lavender)"
		},
		{
			"name": "[CSS] Property Value",
			"scope": "source.css support.constant.color.w3c-special-color-keyword, source.css support.constant.property-value, source.sass support.constant.property-value",
			"foreground": "var(color_pastel_green)"
		},
		{
			"name": "[CSS] Pseudo Class",
			"scope": "source.css entity.other.pseudo-class",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[CSS] Color Names",
			"scope": "source.css support.constant.color.w3c-standard-color-name",
			"foreground": "var(color_sky_blue)",
			"font_style": "italic"
		},
		{
			"name": "[CSS/Sass] ID",
			"scope": "source.css entity.other.attribute-name.id, source.sass entity.other.attribute-name.id",
			"font_style": "bold"
		},
		{
			"name": "[SCSS] Property Value",
			"scope": "source.scss support.constant.color.w3c-special-color-keyword, source.scss support.constant.property-value",
			"foreground": "var(color_pastel_green)"
		},
		{
			"name": "[SCSS] Function Call Arguments",
			"scope": "source.scss meta.function-call.arguments meta.group string.unquoted, source.scss meta.function-call.arguments meta.group variable.other.custom-property, source.scss meta.function-call.arguments meta.group support.constant.property-value",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[diff] Meta Range Context",
			"scope": "source.diff meta.diff.range.context",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[diff] Meta Header From File",
			"scope": "source.diff meta.diff.header.from-file",
			"foreground": "var(color_green_lizard)"
		},
		{
			"name": "[diff] Punctuation Definition From File",
			"scope": "source.diff punctuation.definition.from-file",
			"foreground": "var(color_green_lizard)"
		},
		{
			"name": "[diff] Punctuation Definition Separator",
			"scope": "source.diff punctuation.definition.separator",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[Go] BuiltIn Function",
			"scope": "source.go support.function.builtin",
			"font_style": "italic"
		},
		{
			"name": "[Java] Constant Other",
			"scope": "source.java constant.other",
			"foreground": "var(color_orange)",
			"font_style": "bold"
		},
		{
			"name": "[Java] Class Instantiation",
			"scope": "source.java meta.declaration.value meta.instantiation storage.type.class",
			"foreground": "var(color_green_lizard)",
			"font_style": "bold"
		},
		{
			"name": "[Java] Generic",
			"scope": "source.java meta.generic storage.type.class",
			"foreground": "var(color_sky_blue)",
			"font_style": "none"
		},
		{
			"name": "[Java] Storage Type Primitive",
			"scope": "source.java storage.type.primitive",
			"foreground": "var(color_sky_blue)",
			"font_style": "italic"
		},
		{
			"name": "[Java] Storage Type Class",
			"scope": "source.java meta.declaration.type storage.type.class, source.java storage.type.class",
			"foreground": "var(color_sky_blue)",
			"font_style": "none"
		},
		{
			"name": "[Java] JavaDoc Tags",
			"scope": "source.java keyword.other.documentation, source.java comment.block.documentation.javadoc punctuation.definition.keyword.javadoc",
			"foreground": "var(color_electric_pink)"
		},
		{
			"name": "[JSON] Key",
			"scope": "source.json meta.mapping.key string.quoted.double",
			"foreground": "var(color_pastel_green)"
		},
		{
			"name": "[JSON] Key Quote",
			"scope": "source.json meta.mapping.key punctuation.definition.string.begin, source.json meta.mapping.key punctuation.definition.string.end",
			"foreground": "var(color_pastel_green)"
		},
		{
			"name": "[JSON] Value",
			"scope": "source.json meta.mapping.value string.quoted.double",
			"foreground": "var(color_straw)"
		},
		{
			"name": "[JSON] Value Quote",
			"scope": "source.json meta.mapping.value punctuation.definition.string.begin, source.json meta.mapping.value punctuation.definition.string.end",
			"foreground": "var(color_straw)"
		},
		{
			"name": "[JSON] Number",
			"scope": "source.json constant.numeric",
			"foreground": "var(color_lavender)"
		},
		{
			"name": "[JSON] Boolean",
			"scope": "source.json constant.language.boolean",
			"foreground": "var(color_lavender)"
		},
		{
			"name": "[JSON] Null",
			"scope": "source.json constant.language.null",
			"foreground": "var(color_lavender)"
		},
		{
			"name": "[HTML] Link Punctuation",
			"scope": "text.html.basic meta.path.url punctuation.separator.path",
			"foreground": "var(color_straw)"
		},
		{
			"name": "[Markdown] Fenced Code Block",
			"scope": "text.html.markdown punctuation.definition.raw.code-fence.begin.markdown, text.html.markdown punctuation.definition.raw.code-fence.end.markdown, text.html.markdown markup.raw.code-fence.markdown constant.other.language-name.markdown",
			"foreground": "var(color_electric_pink)",
			"font_style": "bold"
		},
		{
			"name": "[Markdown] List Bullet",
			"scope": "text.html.markdown punctuation.definition.list_item.markdown, text.html.markdown markup.list.numbered.bullet.markdown",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[Markdown] Punctuation",
			"scope": "text.html.markdown punctuation.definition.metadata.begin, text.html.markdown punctuation.definition.metadata.end",
			"foreground": "color_white"
		},
		{
			"name": "[Markdown] Quote",
			"scope": "text.html.markdown markup.quote.markdown",
			"foreground": "var(color_pewter_blue)"
		},
		{
			"name": "[Markdown] Quote Punctuation",
			"scope": "text.html.markdown markup.quote.markdown punctuation.definition.blockquote.markdown",
			"foreground": "var(color_pewter_blue)",
			"font_style": "bold"
		},
		{
			"name": "[Markdown] Link",
			"scope": "text.html.markdown markup.underline.link, text.html.markdown markup.underline.link constant.character.escape",
			"foreground": "var(color_electric_green)",
			"font_style": "underline"
		},
		{
			"name": "[Markdown] Link Title",
			"scope": "text.html.markdown string.other.link.description.title",
			"foreground": "var(color_electric_green)"
		},
		{
			"name": "[Markdown] Link Separator",
			"scope": "text.html.markdown meta.link punctuation.separator.path, text.html.markdown meta.image.inline markup.underline.link punctuation.separator.path",
			"foreground": "var(color_electric_green)"
		},
		{
			"name": "[Markdown] Link Description",
			"scope": "text.html.markdown meta.link.inline.description, text.html.markdown meta.image.inline.description, text.html.markdown meta.link.reference.description, text.html.markdown constant.other.reference.link, text.html.markdown entity.name.reference.link",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[Markdown] Link Punctuation",
			"scope": "text.html.markdown punctuation.definition.link.begin, text.html.markdown punctuation.definition.link.end, text.html.markdown punctuation.definition.image.begin, text.html.markdown punctuation.definition.image.end, text.html.markdown punctuation.definition.constant.begin, text.html.markdown punctuation.definition.constant.end",
			"foreground": "var(color_straw)"
		},
		{
			"name": "[Markdown] Table Punctuation",
			"scope": "text.html.markdown punctuation.separator.table-cell, text.html.markdown punctuation.section.table-header",
			"foreground": "var(color_straw)",
			"font_style": "bold"
		},
		{
			"name": "[Markdown] Table Header",
			"scope": "text.html.markdown meta.table.header",
			"foreground": "var(color_orange)"
		},
		{
			"name": "[Markdown] Horizontal Line",
			"scope": "text.html.markdown punctuation.definition.thematic-break.markdown",
			"foreground": "var(color_green_lizard)",
			"font_style": "bold"
		},
		{
			"name": "[Markdown] Markup Heading",
			"scope": "text.html.markdown markup.heading",
			"foreground": "var(color_orange)"
		},
		{
			"name": "[Markdown] Entity Name Section",
			"scope": "text.html.markdown entity.name.section",
			"foreground": "var(color_lemon_glacier)"
		},
		{
			"name": "[Markdown] Footnote",
			"scope": "text.html.markdown meta.link.reference.footnote",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[Markdown] Other language Name",
			"scope": "text.html.markdown constant.other.language-name.markdown",
			"foreground": "var(color_lemon_glacier)",
			"font_style": "bold"
		},
		{
			"name": "[Markdown] Raw Inline",
			"scope": "text.html.markdown markup.raw.inline.markdown",
			"foreground": "var(color_white)",
			"background": "var(color_raisin_black)"
		},
		{
			"name": "[Markdown] bold",
			"scope": "text.html.markdown markup.bold.markdown",
			"font_style": "bold"
		},
		{
			"name": "[Markdown] Italic",
			"scope": "text.html.markdown markup.italic.markdown",
			"font_style": "italic"
		},
		{
			"name": "[Markdown] Underline",
			"scope": "text.html.markdown markup.underline.markdown",
			"font_style": "underline"
		},
		{
			"name": "[Markdown] Strikethrough",
			"scope": "text.html.markdown markup.strikethrough",
			"foreground": "var(color_red)"
		},
		{
			"name": "[Markdown] Bold Italic",
			"scope": "text.html.markdown markup.bold.markdown markup.italic.markdown",
			"font_style": "bold italic"
		},
		{
			"name": "[PHP] Embedded Tag",
			"scope": "embedding.php text.html.basic punctuation.section.embedded.begin.php, embedding.php text.html.basic punctuation.section.embedded.end.php",
			"foreground": "var(color_sky_blue)",
			"font_style": "bold"
		},
		{
			"name": "[PHP] PHPDoc Tag",
			"scope": "embedding.php text.html.basic comment.block.documentation.phpdoc.php keyword.other.phpdoc.php",
			"foreground": "var(color_pewter_blue)"
		},
		{
			"name": "[PHP] Namespace",
			"scope": "embedding.php text.html.basic support.other.namespace.php",
			"font_style": "bold italic"
		},
		{
			"name": "[PHP] Support Class",
			"scope": "embedding.php text.html.basic support.class",
			"font_style": "bold italic"
		},
		{
			"name": "[Python] Decorator",
			"scope": "source.python meta.annotation meta.qualified-name support.function.builtin, source.python punctuation.definition.annotation",
			"foreground": "var(color_fuzzy_wuzzy)",
			"font_style": "none"
		},
		{
			"name": "[Python] BuiltIn Function",
			"scope": "support.function.builtin.python",
			"font_style": "italic"
		},
		{
			"name": "[Python] Exception",
			"scope": "source.python support.type.exception",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[Python] Exception Catch",
			"scope": "source.python meta.statement.exception.catch meta.generic-name",
			"foreground": "var(color_lemon_glacier)",
			"font_style": "bold"
		},
		{
			"name": "[Python] Type",
			"scope": "support.type.python",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[Python] Function Variable",
			"scope": "source.python variable.function meta.generic-name",
			"foreground": "var(color_green_lizard)",
			"font_style": "bold"
		},
		{
			"name": "[Python] Function Call",
			"scope": "source.python meta.function-call meta.generic-name",
			"foreground": "var(color_lemon_glacier)",
			"font_style": "bold"
		},
		{
			"name": "[Python] Function Argument",
			"scope": "source.python meta.function-call.arguments meta.generic-name",
			"foreground": "var(color_lemon_glacier)",
			"font_style": "bold"
		},
		{
			"name": "[Python] Function Argument Type",
			"scope": "source.python meta.function.parameters.annotation meta.generic-name",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[Python] Function Arrow",
			"scope": "source.python meta.function.annotation.return punctuation.separator.annotation.return",
			"foreground": "var(color_electric_pink)",
			"font_style": "bold"
		},
		{
			"name": "[Python] Function Arrow Return",
			"scope": "source.python meta.function.annotation.return meta.generic-name",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[Python] Import",
			"scope": "source.python meta.statement.import",
			"foreground": "var(color_lemon_glacier)",
			"font_style": "bold"
		},
		{
			"name": "[Python] Import Source",
			"scope": "source.python meta.import-source",
			"foreground": "var(color_straw)",
			"font_style": "bold"
		},
		{
			"name": "[Python] Import All",
			"scope": "source.python constant.language.import-all",
			"foreground": "var(color_electric_pink)",
			"font_style": "bold"
		},
		{
			"name": "[Python] Conditional Statement",
			"scope": "source.python meta.statement.conditional.if meta.generic-name, source.python meta.statement.conditional.elseif meta.generic-name",
			"foreground": "var(color_lemon_glacier)",
			"font_style": "bold"
		},
		{
			"name": "[Python] Loop Statement",
			"scope": "source.python meta.statement.loop meta.generic-name",
			"foreground": "var(color_lemon_glacier)",
			"font_style": "bold"
		},
		{
			"name": "[Python] Item Access",
			"scope": "source.python meta.item-access meta.generic-name",
			"foreground": "var(color_lemon_glacier)",
			"font_style": "bold"
		},
		{
			"name": "[Python] Item Access Arrow",
			"scope": "source.python meta.function.annotation.return meta.item-access meta.generic-name",
			"foreground": "var(color_sky_blue)",
			"font_style": "none"
		},
		{
			"name": "[Python] Item Access Argument",
			"scope": "source.python meta.item-access.arguments meta.generic-name",
			"foreground": "var(color_lemon_glacier)",
			"font_style": "bold"
		},
		{
			"name": "[Python] Group",
			"scope": "source.python meta.group meta.generic-name",
			"foreground": "var(color_lemon_glacier)",
			"font_style": "bold"
		},
		{
			"name": "[Python] Sequence",
			"scope": "source.python meta.sequence meta.generic-name",
			"foreground": "var(color_lemon_glacier)",
			"font_style": "bold"
		},
		{
			"name": "[Python] Set",
			"scope": "source.python meta.set meta.generic-name",
			"foreground": "var(color_lemon_glacier)",
			"font_style": "bold"
		},
		{
			"name": "[Python] Mapping Key",
			"scope": "source.python meta.mapping.key meta.generic-name",
			"foreground": "var(color_straw)",
			"font_style": "italic"
		},
		{
			"name": "[Python] Mapping Value",
			"scope": "source.python meta.mapping.value meta.generic-name",
			"foreground": "var(color_lemon_glacier)",
			"font_style": "bold"
		},
		{
			"name": "[Sass] Variable",
			"scope": "source.sass variable.parameter",
			"foreground": "var(color_lemon_glacier)",
			"font_style": "bold"
		},
		{
			"name": "[Ruby] BuiltIn Function",
			"scope": "source.ruby support.function.builtin",
			"font_style": "italic"
		},
		{
			"name": "[Shell] BuiltIn Function",
			"scope": "source.shell support.function.builtin",
			"font_style": "italic"
		},
		{
			"name": "[XML] Namespace",
			"scope": "text.xml entity.name.tag.namespace",
			"foreground": "var(color_lemon_glacier)",
			"font_style": "bold"
		},
		{
			"name": "[XML] Doctype/Preprocessor",
			"scope": "text.xml meta.tag.sgml.doctype, text.xml meta.tag.preprocessor entity.name.tag, text.xml meta.tag.preprocessor punctuation.definition.tag.begin, text.xml meta.tag.preprocessor punctuation.definition.tag.end, text.xml meta.tag.sgml.doctype punctuation.definition.tag.begin, text.xml meta.tag.sgml.doctype punctuation.definition.tag.end",
			"foreground": "var(color_dark_sky_blue)"
		},
		{
			"name": "[XML] CDATA Tag",
			"scope": "text.xml string.unquoted.cdata punctuation.definition.string.begin, text.xml string.unquoted.cdata punctuation.definition.string.end",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[YAML] Entity Name Tag",
			"scope": "source.yaml entity.name.tag",
			"foreground": "var(color_sky_blue)"
		},
		{
			"name": "[SublimeLinter] Warning",
			"scope": "sublimelinter.mark.warning",
			"foreground": "var(color_yellow)"
		},
		{
			"name": "[SublimeLinter] Error",
			"scope": "sublimelinter.mark.error",
			"foreground": "var(color_red)"
		},
		{
			"name": "[SublimeLinter] Gutter Mark",
			"scope": "sublimelinter.gutter-mark",
			"foreground": "var(color_green)"
		},
		{
			"name": "[GitGutter] Ignored",
			"scope": "markup.ignored.git_gutter",
			"foreground": "var(color_electric_green)",
			"font_style": "italic"
		},
		{
			"name": "[GitGutter] Untracked",
			"scope": "markup.untracked.git_gutter",
			"foreground": "var(color_dark_sky_blue)"
		},
		{
			"name": "[GitGutter] Inserted",
			"scope": "markup.inserted.git_gutter",
			"foreground": "var(color_electric_green)"
		},
		{
			"name": "[GitGutter] Changed",
			"scope": "markup.changed.git_gutter",
			"foreground": "var(color_yellow)"
		},
		{
			"name": "[GitGutter] Deleted",
			"scope": "markup.deleted.git_gutter",
			"foreground": "var(color_red)"
		},
		{
			"name": "[Javascript] Arrow Function",
			"scope": "entity.name.function variable.other.readwrite",
			"foreground": "var(color_green_lizard)",
			"font_style": "bold"
		},
		{
			"name": "[Javascript] Class Constructor",
			"scope": "source.js entity.name.function.constructor",
			"foreground": "var(color_electric_pink)"
		},
		{
			"name": "[Babel] Class Constructor",
			"scope": "source.jsx entity.name.function.constructor",
			"foreground": "var(color_electric_pink)"
		},
		{
			"name": "[Babel] Mapping Key",
			"scope": "source.jsx meta.mapping.key",
			"foreground": "var(color_straw)",
			"font_style": "italic"
		},
		{
			"name": "[Babel] Decorator",
			"scope": "source.js tag.decorator entity.name.tag, source.js tag.decorator punctuation.definition.tag",
			"foreground": "var(color_fuzzy_wuzzy)",
			"font_style": "underline"
		},
		{
			"name": "[Babel] React JSX Tag",
			"scope": "source.js entity.name.tag, source.jsx entity.name.tag",
			"foreground": "var(color_carrot_orange)"
		},
		{
			"name": "[Babel] React JSX Tag Native",
			"scope": "source.js entity.name.tag.native, source.jsx entity.name.tag.native",
			"foreground": "var(color_electric_pink)"
		},
		{
			"name": "[TypeScript] Class",
			"scope": "source.ts entity.name.type.class",
			"foreground": "var(color_green_lizard)",
			"font_style": "underline"
		},
		{
			"name": "[TypeScript] Class Constructor",
			"scope": "source.ts entity.name.function.constructor, source.ts meta.class meta.method.declaration storage.type.",
			"foreground": "var(color_electric_pink)",
			"font_style": "bold"
		},
		{
			"name": "[TypeScript] Inherited Class",
			"scope": "source.ts meta.class entity.other.inherited-class",
			"foreground": "var(color_green_lizard)",
			"font_style": "underline"
		},
		{
			"name": "[TypeScript] Enum",
			"scope": "source.ts entity.name.type.enum, source.ts entity.name.enum",
			"foreground": "var(color_carrot_orange)"
		},
		{
			"name": "[TypeScript] Type",
			"scope": "source.ts meta.type support.class",
			"foreground": "var(color_sky_blue)",
			"font_style": "none"
		},
		{
			"name": "[TypeScript] Type Alias",
			"scope": "source.ts meta.type-alias support.class",
			"foreground": "var(color_sky_blue)",
			"font_style": "none"
		},
		{
			"name": "[TypeScript] Generic",
			"scope": "source.ts meta.generic support.class",
			"foreground": "var(color_sky_blue)",
			"font_style": "none"
		},
		{
			"name": "[TypeScript] Parameter Generic",
			"scope": "source.ts variable.parameter.generic",
			"foreground": "var(color_sky_blue)",
			"font_style": "none"
		},
		{
			"name": "[TypeScript] Decorator",
			"scope": "source.ts meta.class meta.method.declaration meta.parameters meta.decorator variable.other.readwrite, source.ts meta.class meta.method.declaration meta.parameters meta.decorator punctuation.decorator",
			"foreground": "var(color_fuzzy_wuzzy)"
		},
		{
			"name": "[TypeScript] Mapping Key",
			"scope": "source.ts meta.mapping.key, source.ts meta.object-literal.key",
			"foreground": "var(color_straw)",
			"font_style": "italic"
		},
		{
			"name": "[TypeScript] Interpolated String",
			"scope": "source.ts string.template",
			"foreground": "var(color_straw)",
			"font_style": "italic"
		},
		{
			"name": "[TypeScript] Interpolated String Keyword",
			"scope": "source.ts punctuation.definition.template-expression.begin, source.ts punctuation.definition.template-expression.end",
			"foreground": "var(color_white)",
			"font_style": "none"
		},
		{
			"name": "[TypeScript] Embedded Line",
			"scope": "source.ts meta.embedded.line",
			"foreground": "var(color_white)",
			"font_style": "none"
		},
		{
			"name": "[TypeScript] Console Function Call",
			"scope": "source.ts meta.function-call support.function.console",
			"foreground": "var(color_sky_blue)",
			"font_style": "none"
		},
		{
			"name": "[TypeScript] Variable Parameter",
			"scope": "source.ts meta.interface meta.brackets variable.other.readwrite",
			"foreground": "var(color_carrot_orange)",
			"font_style": "italic"
		},
		{
			"name": "[TypeScript] Variable Function Call",
			"scope": "source.ts meta.function-call support.function",
			"foreground": "var(color_green_lizard)",
			"font_style": "bold"
		},
		{
			"name": "[TypeScript] Variable Other Object",
			"scope": "source.ts meta.function-call variable.other.object.property",
			"foreground": "var(color_white)",
			"font_style": "none"
		},
		{
			"name": "[TypeScript] Variable Property DOM",
			"scope": "source.ts support.variable.property.dom",
			"foreground": "var(color_white)"
		},
		{
			"name": "[TypeScript] JSDoc Tag",
			"scope": "source.ts comment.block.documentation storage.type.class.jsdoc",
			"foreground": "var(color_green_lizard)",
			"font_style": "italic"
		}
	]
}